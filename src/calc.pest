res = { "return" ~ assign }
main = { SOI ~ funcdef* ~ EOI}
stmt = _{ expr | declare | res ~ semiclon | ifstmt | block | whilestmt | forstmt }
expr = { assign ~ semiclon }
declare = { typename ~ ident ~ semiclon }
assign = { equation ~ (asnop ~ assign)? }
equation = { relational ~ (equalop ~ relational)* }
relational = {addminus ~ (relop ~ addminus)* }
addminus = {factor ~ (exprop ~ factor)* }
factor = { unary ~ (factop ~ unary)* }
unary = { ((addop | subop)? ~ atom) |  (addr | deref) ~ unary}
atom = { funccall | ident | num | "(" ~ assign ~ ")" }
num = @{ASCII_DIGIT+}
ident = @{ !keywords ~ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT)* }
typeident = @{ !syntaxkeywords ~ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT)* }
typename = { typeident ~ deref* }
ifstmt = { "if" ~ "(" ~ assign ~ ")" ~ stmt ~ ("else" ~ stmt)? }
block = { "{" ~ stmt* ~ "}" }
whilestmt = { "while" ~ "(" ~ assign ~ ")" ~ stmt }
forstmt = { "for" ~ forcond ~ stmt }
forcond = { "(" ~ assign? ~  forsep ~ assign? ~  forsep ~ assign? ~ ")" }
funccall = { ident ~ "(" ~ funcargs? ~ ")" }
funcargs = { assign ~ ( comma ~ assign )* }
funcdef = { typename ~ ident ~ "(" ~  funcindets? ~  ")" ~ funcbody }
funcindets = { typename ~ ident ~ ( comma ~ typename ~ ident)* }
funcbody = { "{" ~ stmt* ~ "}" }

equalop = _{ eqop | nqop }
relop = _{ leop | ltop | geop | gtop }
exprop = _{ addop | subop }
factop = _{ mulop | divop }

semiclon = _{ ";" }
forsep = { ";" }
asnop = { "=" }
eqop = { "==" }
nqop = { "!=" }
ltop = { "<" }
leop = { "<=" }
gtop = { ">" }
geop = { ">=" }
addop = { "+" }
subop = { "-" }
mulop = { "*" }
divop = { "/" }
comma = _{ "," }
addr = { "&" }
deref = { "*" }

keywords = { syntaxkeywords | typekeywords }
syntaxkeywords = { "return" | "if" | "else" | "while" | "for" }
typekeywords = { "int" }

WHITESPACE = _{ " " | NEWLINE }
